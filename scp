package com.mlth.first;
class Storage{
	int n;
	boolean available;
	public synchronized int store(int n) {
		if(available )
		try {
			
			wait();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		System.out.println(Thread.currentThread().getName()+" stores " + n);
		this.n=n;
		available=true;
		notify();
		return n;
	}
	public  synchronized int get(){
		if(!available)
			try {
				wait();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		
		System.out.println(Thread.currentThread().getName()+" gets" + n);
	
		available=false;
		notify();
		return n;
	}
}
class Printer implements Runnable{
 Storage s;
	public Printer(Storage s) {
		this.s=s;
		new Thread(this,"printer").start();
	}
	@Override
	public void run() {
		int x=1;
		while(x<=10) {
		s.get();	x++;
		}
		
	}
	
}
class Counter implements Runnable{
Storage s;
	public Counter(Storage s) {
		this.s=s;
		new Thread(this," counter ").start();
	}
	@Override
	public void run() {
		
		int x=1,i=0;
		while(x<=10) {
			s.store(i++);
			x++;
		}
		
	}
	
}
public class SCP {

	public static void main(String[] args) {
		Storage s=new Storage();
		new Printer(s);
		new Counter(s);
	}

}
