package com.thread.examples;

import java.util.LinkedList;
import java.util.Queue;

class First{
	int n,c;
	boolean available;
	Queue<Integer> queue = new LinkedList<>();
	public synchronized int put(int n){
		if(available && queue.size()==5)
		try {
			System.out.println("Buffer is full ,producer waiting!! ");
			wait();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println(Thread.currentThread().getName()+" puts" + n);
		queue.add(n);
		this.n=n;
		available=true;
		notify();
		return n;
	}
	public  synchronized int get(){
		if(!available && queue.size()==0)
			try {
				wait();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		
		System.out.println(Thread.currentThread().getName()+" gets" + queue.peek());
		queue.remove();
		available=false;
		notify();
		return n;
	}
}
class Producer implements Runnable{
	 First f;
	public Producer(First f) {
		// TODO Auto-generated constructor stub
		this.f=f;
		new Thread(this,"producer").start();
	}

	@Override
	public void run() {
		int x=1,i=1;
		while(x<=10) {
			f.put(i++);
			x++;
		}
		
	}
	
}
class Consumer implements Runnable{
	 First f;
	public Consumer(First f) {
		// TODO Auto-generated constructor stub
		this.f=f;
		new Thread(this,"consumer ").start();
	}

	@Override
	public void run() {
		int x=1;
		while(x<=10) {
		f.get();	x++;
		}
			
	}
	
}

public class PC {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
 First f=new First();
 new Producer(f);
 new Consumer(f);
	}

}
